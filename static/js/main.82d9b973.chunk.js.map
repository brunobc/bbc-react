{"version":3,"sources":["components/Label/Label.js","components/TextInput/TextInput.js","components/ProgressBar/ProgressBar.js","components/PasswordInput/PasswordInput.js","components/EyeIcon/EyeIcon.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","props","marginBottom","id","border","className","ProgressBar","getColor","percent","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","backgroundColor","React","Component","defaultProps","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","description","code","examples","message","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","ExampleHelloWorld","Error","styled","div","Input","input","Fieldset","TextInputStyledComponents","styles","fieldset","inputError","TextInputCSSModules","TextInputBEM","RegistrationForm","user","validate","submitted","email","errors","Object","getOwnPropertyNames","passwordQuality","ExampleRegistrationForm","console","log","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","ExampleComponent","require","componentName","default","Props","ComponentPage","component","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","ReactDOM","render","document","getElementById"],"mappings":"qKAuBeA,MAnBf,YAA4C,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAC9B,OACE,2BAAOC,MAAO,CAACC,QAAS,SAAUJ,QAASA,GACxCC,EADH,IACYC,GAAY,0BAAMC,MAAO,CAACE,MAAO,QAArB,S,kGCiDbC,MAnDf,YAAqI,IAAjHC,EAAgH,EAAhHA,OAAQC,EAAwG,EAAxGA,KAAMP,EAAkG,EAAlGA,MAAkG,IAA3FQ,YAA2F,MAApF,OAAoF,MAA5EP,gBAA4E,SAA1DQ,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAaC,EAAQ,+GAClI,OACE,yBAAKZ,MAAO,CAACa,aAAc,KACzB,kBAACjB,EAAA,EAAD,CAAOC,QAASO,EAAQN,MAAOA,EAAOC,SAAUA,IAChD,yCACEe,GAAIV,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVP,MAAOU,GAAS,CAACK,OAAQ,kBACrBH,IACHD,EACFD,GAAS,yBAAKM,UAAU,QAAQhB,MAAO,CAACE,MAAO,QAASQ,M,+GChBzDO,E,4MACJC,SAAW,SAACC,GACV,OAA2B,MAAvB,EAAKP,MAAMO,QAAwB,QAChC,EAAKP,MAAMO,QAAU,GAAK,aAAe,O,EAGlDC,8BAAgC,WAC9B,OAAOC,SAAS,EAAKT,MAAMU,OAAS,EAAKV,MAAMO,QAAU,KAAM,K,uDAGvD,IAAD,EAC0BI,KAAKX,MAA/BO,EADA,EACAA,QAASG,EADT,EACSA,MAAOE,EADhB,EACgBA,OACvB,OACE,yBAAKxB,MAAO,CAACe,OAAQ,4BAAuBO,MAAOA,IAAnD,mCACE,yBAAKtB,MAAO,CACVsB,MAAOC,KAAKH,gCACZI,SACAC,gBAAiBF,KAAKL,SAASC,MAJnC,gC,GAboBO,IAAMC,WAmChCV,EAAYW,aAAe,CACzBJ,OAAQ,GAGKP,S,6ICnCTY,E,kDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAMRkB,mBAAqB,SAAAC,GACnB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEC,cAAeD,EAAUC,iBAEhCH,GAAOA,EAAMI,kBATjB,EAAKC,MAAQ,CACXF,cAAc,GAHC,E,qDAcT,IAAD,EAC4GX,KAAKX,MAAhHR,EADD,EACCA,OAAQK,EADT,EACSA,MAAOX,EADhB,EACgBA,MAAOY,EADvB,EACuBA,MAAOH,EAD9B,EAC8BA,SAAUC,EADxC,EACwCA,YAAa6B,EADrD,EACqDA,UAAWC,EADhE,EACgEA,qBAAsBC,EADtF,EACsFA,QAAY3B,EADlG,wHAECsB,EAAiBX,KAAKa,MAAtBF,aAER,OACE,kBAAC/B,EAAA,EAAD,eACEC,OAAQA,EACRN,MAAOA,EACPU,YAAaA,EACbF,KAAM4B,EAAe,OAAS,WAC9B3B,SAAUA,EACVE,MAAOA,EACP4B,UAAWA,EACX3B,MAAOA,EACPX,UAAQ,GACJa,GAEF0B,GACA,uBACEE,KAAK,GACLC,QAASlB,KAAKO,mBACd9B,MAAO,CAAE0C,WAAY,IACrB,kBAACC,EAAA,EAAD,OAIFlC,EAAMmC,OAAS,GAAKL,GAAW,kBAACtB,EAAA,EAAD,CAAaE,QAASoB,EAASjB,MAAO,W,GAzCnDI,IAAMC,WAgFlCE,EAAcD,aAAe,CAC3BS,UAAW,GACXC,sBAAsB,EACtBxC,MAAO,YAGM+B,S,mFC9EAc,MAZf,WAEE,OACE,yBAAKrB,MAAM,KAAKE,OAAO,KAAKqB,MAAM,6BAA6BC,QAAQ,aACrE,uBAAGC,UAAU,gCAAgCC,KAAK,WAChD,0BAAMC,EAAE,6UACR,4BAAQC,GAAG,SAASC,GAAG,SAASC,EAAE,c,kCCT1CC,EAAOC,QAA+B,CACpC,CACEjD,KAAM,UACNkD,YAAa,eACbC,KACE,4yBACFC,SAAU,CACR,CACEpD,KAAM,UACNkD,YAAa,GACbC,KACE,oJAIR,CACEnD,KAAM,aACNkD,YACE,gEACF3C,MAAO,CACL8C,QAAS,CACPpD,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qBACbI,aAAc,CAAElD,MAAO,UAAWmD,UAAU,KAGhDJ,KACE,qYACFC,SAAU,CACR,CACEpD,KAAM,oBACNkD,YAAa,iBACbC,KACE,wNAIR,CACEnD,KAAM,QACNkD,YACE,gEACF3C,MAAO,CACLf,QAAS,CACPS,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,gCAEfzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,cAEfxD,SAAU,CACRO,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,yCAGjBC,KACE,2mBACFC,SAAU,CACR,CACEpD,KAAM,kBACNkD,YAAa,iBACbC,KACE,oMAEJ,CACEnD,KAAM,kBACNkD,YAAa,iBACbC,KACE,+MAIR,CACEnD,KAAM,gBACNkD,YACE,gFACF3C,MAAO,CACLR,OAAQ,CACNE,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJlD,KAAM,CACJC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,uHAEJ9C,MAAO,CACLH,KAAM,CAAED,KAAM,OACdN,UAAU,EACVwD,YAAa,kBAEfzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,cACbI,aAAc,CAAElD,MAAO,aAAcmD,UAAU,IAEjDrD,SAAU,CACRD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,qDAEflB,UAAW,CACT/B,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,+BACbI,aAAc,CAAElD,MAAO,KAAMmD,UAAU,IAEzCpD,YAAa,CACXF,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qDAEfjB,qBAAsB,CACpBhC,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YACE,+EACFI,aAAc,CAAElD,MAAO,QAASmD,UAAU,IAE5CrB,QAAS,CACPjC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJ7C,MAAO,CACLJ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,gCAGjBC,KACE,6lFACFC,SAAU,CACR,CACEpD,KAAM,qBACNkD,YAAa,uBACbC,KACE,24BAIR,CACEnD,KAAM,cACNkD,YAAa,GACb3C,MAAO,CACLO,QAAS,CACPb,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,iCAEfjC,MAAO,CACLhB,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,aAEf/B,OAAQ,CACNlB,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,aACbI,aAAc,CAAElD,MAAO,IAAKmD,UAAU,KAG1CJ,KACE,u3CACFC,SAAU,CACR,CACEpD,KAAM,oBACNkD,YAAa,gCACbC,KACE,6OAEJ,CACEnD,KAAM,mBACNkD,YAAa,eACbC,KACE,8MAEJ,CACEnD,KAAM,mBACNkD,YAAa,eACbC,KACE,gNAIR,CACEnD,KAAM,mBACNkD,YAAa,8CACb3C,MAAO,CACLiD,oBAAqB,CACnBvD,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,+CACbI,aAAc,CAAElD,MAAO,4BAA6BmD,UAAU,IAEhEE,SAAU,CACRxD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,iCAEfQ,kBAAmB,CACjBzD,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,0BACbI,aAAc,CAAElD,MAAO,IAAKmD,UAAU,KAG1CJ,KACE,g9FACFC,SAAU,CACR,CACEpD,KAAM,0BACNkD,YAAa,GACbC,KACE,mTAIR,CACEnD,KAAM,YACNkD,YACE,gIACF3C,MAAO,CACLR,OAAQ,CACNE,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJlD,KAAM,CACJC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yGAEJzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,eAEfjD,KAAM,CACJA,KAAM,CACJD,KAAM,OACNI,MAAO,CACL,CAAEA,MAAO,SAAUmD,UAAU,GAC7B,CAAEnD,MAAO,WAAYmD,UAAU,GAC/B,CAAEnD,MAAO,aAAcmD,UAAU,KAGrC7D,UAAU,EACVwD,YAAa,aACbI,aAAc,CAAElD,MAAO,SAAUmD,UAAU,IAE7C7D,SAAU,CACRO,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,0CACbI,aAAc,CAAElD,MAAO,QAASmD,UAAU,IAE5CrD,SAAU,CACRD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,6BAEf/C,YAAa,CACXF,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qCAEf9C,MAAO,CAAEH,KAAM,CAAED,KAAM,OAASN,UAAU,EAAOwD,YAAa,SAC9D7C,MAAO,CACLJ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,uCAEf5C,SAAU,CACRL,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,iDAGjBC,KACE,yvDACFC,SAAU,CACR,CACEpD,KAAM,eACNkD,YAAa,8BACbC,KACE,8aAEJ,CACEnD,KAAM,kBACNkD,YAAa,mBACbC,KACE,6WAIR,CACEnD,KAAM,eACNkD,YACE,gIACF3C,MAAO,CACLR,OAAQ,CACNE,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJlD,KAAM,CACJC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yGAEJzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,eAEfjD,KAAM,CACJA,KAAM,CACJD,KAAM,OACNI,MAAO,CACL,CAAEA,MAAO,SAAUmD,UAAU,GAC7B,CAAEnD,MAAO,WAAYmD,UAAU,GAC/B,CAAEnD,MAAO,aAAcmD,UAAU,KAGrC7D,UAAU,EACVwD,YAAa,aACbI,aAAc,CAAElD,MAAO,SAAUmD,UAAU,IAE7C7D,SAAU,CACRO,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,0CACbI,aAAc,CAAElD,MAAO,QAASmD,UAAU,IAE5CrD,SAAU,CACRD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,6BAEf/C,YAAa,CACXF,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qCAEf9C,MAAO,CAAEH,KAAM,CAAED,KAAM,OAASN,UAAU,EAAOwD,YAAa,SAC9D7C,MAAO,CACLJ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,uCAEf5C,SAAU,CACRL,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,iDAGjBC,KACE,4xDACFC,SAAU,CACR,CACEpD,KAAM,eACNkD,YAAa,8BACbC,KACE,ybAIR,CACEnD,KAAM,sBACNkD,YACE,gIACF3C,MAAO,CACLR,OAAQ,CACNE,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJlD,KAAM,CACJC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yGAEJzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,eAEfjD,KAAM,CACJA,KAAM,CACJD,KAAM,OACNI,MAAO,CACL,CAAEA,MAAO,SAAUmD,UAAU,GAC7B,CAAEnD,MAAO,WAAYmD,UAAU,GAC/B,CAAEnD,MAAO,aAAcmD,UAAU,KAGrC7D,UAAU,EACVwD,YAAa,aACbI,aAAc,CAAElD,MAAO,SAAUmD,UAAU,IAE7C7D,SAAU,CACRO,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,0CACbI,aAAc,CAAElD,MAAO,QAASmD,UAAU,IAE5CrD,SAAU,CACRD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,6BAEf/C,YAAa,CACXF,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qCAEf9C,MAAO,CAAEH,KAAM,CAAED,KAAM,OAASN,UAAU,EAAOwD,YAAa,SAC9D7C,MAAO,CACLJ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,uCAEf5C,SAAU,CACRL,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,iDAGjBC,KACE,2wDACFC,SAAU,CACR,CACEpD,KAAM,eACNkD,YAAa,8BACbC,KACE,8cAIR,CACEnD,KAAM,4BACNkD,YACE,gIACF3C,MAAO,CACLR,OAAQ,CACNE,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yFAEJlD,KAAM,CACJC,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YACE,yGAEJzD,MAAO,CACLQ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,eAEfjD,KAAM,CACJA,KAAM,CACJD,KAAM,OACNI,MAAO,CACL,CAAEA,MAAO,SAAUmD,UAAU,GAC7B,CAAEnD,MAAO,WAAYmD,UAAU,GAC/B,CAAEnD,MAAO,aAAcmD,UAAU,KAGrC7D,UAAU,EACVwD,YAAa,aACbI,aAAc,CAAElD,MAAO,SAAUmD,UAAU,IAE7C7D,SAAU,CACRO,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,0CACbI,aAAc,CAAElD,MAAO,QAASmD,UAAU,IAE5CrD,SAAU,CACRD,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,6BAEf/C,YAAa,CACXF,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,qCAEf9C,MAAO,CAAEH,KAAM,CAAED,KAAM,OAASN,UAAU,EAAOwD,YAAa,SAC9D7C,MAAO,CACLJ,KAAM,CAAED,KAAM,UACdN,UAAU,EACVwD,YAAa,uCAEf5C,SAAU,CACRL,KAAM,CAAED,KAAM,QACdN,UAAU,EACVwD,YAAa,iDAGjBC,KACE,m5DACFC,SAAU,CACR,CACEpD,KAAM,eACNkD,YAAa,8BACbC,KACE,ke,mCC7gBV,2EAGe,SAASQ,IACtB,OAAO,kBAAC,IAAD,Q,6BCJT,0EAIe,SAASC,IACtB,OAAO,kBAAC,IAAD,CAAOpE,QAAQ,OAAOC,MAAM,W,6BCLrC,0EAIe,SAASoE,IACtB,OAAO,kBAAC,IAAD,CAAOrE,QAAQ,OAAOC,MAAM,OAAOC,UAAQ,M,4FCD9CoE,E,kDACJ,WAAYvD,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,MAAQ,CACXgC,SAAU,IAJK,E,yDASjB,IAAMxB,EAASrB,KAAKa,MAAMgC,SAASxB,OACnC,OAAOA,EAAS,GAAK,IAAe,GAATA,I,+BAGnB,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,eACExC,OAAO,sCACPC,KAAK,WACLE,SAAU,SAACwB,GAAD,OAAW,EAAKC,SAAS,CAAEoC,SAAUrC,EAAMsC,OAAO5D,SAC5DA,MAAOc,KAAKa,MAAMgC,SAClBE,UAAW,EACX9D,YAAY,iBACZ8B,sBAAoB,EACpBC,QAAShB,KAAKgD,cACVhD,KAAKX,a,GA1Bcc,IAAMC,WAiCxBwC,a,6BCrCf,0EAIe,SAASK,IACtB,OAAO,kBAAC,IAAD,CAAarD,QAAS,IAAKG,MAAO,IAAKE,OAAQ,O,6BCLxD,0EAIe,SAASiD,IACtB,OAAO,kBAAC,IAAD,CAAatD,QAAS,GAAIG,MAAO,Q,6BCL1C,0EAIe,SAASoD,IACtB,OAAO,kBAAC,IAAD,CAAavD,QAAS,GAAIG,MAAO,Q,mICDrBqD,E,uKAEjB,OACE,kBAAC,IAAD,CACEvE,OAAO,mBACPN,MAAM,aACNO,KAAK,YACLE,SAAU,aACVR,UAAQ,EACRW,MAAM,gC,GAT4BgB,IAAMC,Y,mICA3BsC,E,uKAEjB,OACE,kBAAC,IAAD,CACE7D,OAAO,mBACPN,MAAM,aACNO,KAAK,YACLE,SAAU,mB,GAP2BmB,IAAMC,Y,gGCAnD,SAASiD,EAAT,GAAgC,IAAXlB,EAAU,EAAVA,QACnB,OAAO,sCAAYA,GAQrBkB,EAAWhD,aAAe,CACxB8B,QAAS,SAGIkB,QCbA,SAASC,IACtB,OAAO,kBAAC,EAAD,CAAYnB,QAAQ,2B,ucCgEdvD,MA/Df,YAAqI,IAAjHC,EAAgH,EAAhHA,OAAQC,EAAwG,EAAxGA,KAAMP,EAAkG,EAAlGA,MAAkG,IAA3FQ,YAA2F,MAApF,OAAoF,MAA5EP,gBAA4E,SAA1DQ,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAaC,EAAQ,+GAC5HkE,EAAQC,IAAOC,IAAV,KAILC,EAAQF,IAAOG,MAAV,IACCxE,GAAS,iBAIfyE,EAAWJ,IAAOC,IAAV,KAId,OACE,kBAACG,EAAD,KACE,kBAACvF,EAAA,EAAD,CAAOC,QAASO,EAAQN,MAAOA,EAAOC,SAAUA,IAChD,kBAACkF,EAAD,eACEnE,GAAIV,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,GACNK,IACHD,EACFD,GAAS,kBAACoE,EAAD,KAAQpE,KC5BHiE,E,uKAEjB,OACE,kBAACS,EAAD,CACEhF,OAAO,mBACPN,MAAM,aACNO,KAAK,YACLE,SAAU,aACVR,UAAQ,EACRW,MAAM,gC,GAT4BgB,IAAMC,Y,2JCqDjCxB,MAnDf,YAAqI,IAAjHC,EAAgH,EAAhHA,OAAQC,EAAwG,EAAxGA,KAAMP,EAAkG,EAAlGA,MAAkG,IAA3FQ,YAA2F,MAApF,OAAoF,MAA5EP,gBAA4E,SAA1DQ,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAaC,EAAQ,+GAClI,OACE,yBAAKI,UAAWqE,IAAOC,UACrB,kBAAC1F,EAAA,EAAD,CAAOC,QAASO,EAAQN,MAAOA,EAAOC,SAAUA,IAChD,yCACEe,GAAIV,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVS,UAAWN,GAAS2E,IAAOE,YACvB3E,IACHD,EACFD,GAAS,yBAAKM,UAAWqE,IAAO3E,OAAQA,KChB1BiE,E,uKAEjB,OACE,kBAACa,EAAD,CACEpF,OAAO,mBACPN,MAAM,aACNO,KAAK,YACLE,SAAU,aACVR,UAAQ,EACRW,MAAM,gC,GAT4BgB,IAAMC,Y,kJCiEjCxB,MAhEf,YAYI,IAXFC,EAWC,EAXDA,OACAC,EAUC,EAVDA,KACAP,EASC,EATDA,MASC,IARDQ,YAQC,MARM,OAQN,MAPDP,gBAOC,SANDQ,EAMC,EANDA,SACAC,EAKC,EALDA,YACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,SACGC,EACF,+GACD,OACE,yBAAKI,UAAU,aACb,kBAACpB,EAAA,EAAD,CAAOC,QAASO,EAAQN,MAAOA,EAAOC,SAAUA,IAChD,yCACEe,GAAIV,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVS,UAAWN,GAAS,iCAChBE,IAELD,EACAD,GAAS,yBAAKM,UAAU,oBAAoBN,KC5B9BiE,E,uKAEjB,OACE,kBAACc,EAAD,CACErF,OAAO,mBACPN,MAAM,aACNO,KAAK,YACLE,SAAU,aACVR,UAAQ,EACRW,MAAM,gC,GAT4BgB,IAAMC,Y,2ICE1C+D,E,kDACJ,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IAYRL,SAAW,SAACwB,GACV,IAAM4D,EAAO,EAAKvD,MAAMuD,KACxBA,EAAK5D,EAAMsC,OAAOhE,MAAQ0B,EAAMsC,OAAO5D,MACvC,EAAKuB,SAAS,CAAC2D,UAhBE,EAyCnB7B,SAAW,WAAO,IACT6B,EAAQ,EAAKvD,MAAbuD,KACa,EAAKC,SAASD,KAEhC,EAAK/E,MAAMkD,SAAS6B,GACpB,EAAK3D,SAAS,CAAC6D,WAAW,MA3C5B,EAAKzD,MAAQ,CACXuD,KAAM,CACJG,MAAO,GACP1B,SAAU,IAEZ2B,OAAQ,GACRF,WAAW,GATI,E,4DAsBHzB,GACd,OAAKA,EACDA,EAASxB,QAAUrB,KAAKX,MAAMmD,kBAA0B,IACjC1C,SAAS+C,EAASxB,OAAOrB,KAAKX,MAAMmD,kBAAoB,IAAK,IAFlE,O,kCAMK,IAAnB+B,EAAkB,EAAlBA,MAAO1B,EAAW,EAAXA,SACT2B,EAAS,GACRhC,EAAqBxC,KAAKX,MAA1BmD,kBAOP,OALK+B,IAAOC,EAAOD,MAAQ,mBACvB1B,EAASxB,OAASmB,IAAmBgC,EAAO3B,SAAP,oCAA+CL,EAA/C,iBAEzCxC,KAAKS,SAAS,CAAC+D,WACmD,IAA9CC,OAAOC,oBAAoBF,GAAQnD,S,+BAa/C,IAAD,EACqBrB,KAAKa,MAA1B2D,EADA,EACAA,OAAQF,EADR,EACQA,UADR,EAEmBtE,KAAKa,MAAMuD,KAA9BG,EAFA,EAEAA,MAAO1B,EAFP,EAEOA,SAEd,OACEyB,EACA,4BAAKtE,KAAKX,MAAMiD,qBAChB,6BACE,kBAAC1D,EAAA,EAAD,CACEC,OAAO,0BACPC,KAAK,QACLE,SAAUgB,KAAKhB,SACfT,MAAM,QACNW,MAAOqF,EACPpF,MAAOqF,EAAOD,MACd/F,UAAQ,IAEV,kBAAC8B,EAAA,EAAD,CACEzB,OAAO,6BACPC,KAAK,WACLI,MAAO2D,EACP7D,SAAUgB,KAAKhB,SACfgC,QAAShB,KAAK2E,gBAAgB9B,GAC9B9B,sBAAoB,EACpBD,UAAW,GACX3B,MAAOqF,EAAO3B,WAEhB,2BAAO9D,KAAK,SAASG,MAAM,WAAWgC,QAASlB,KAAKuC,gB,GA9E7BpC,IAAMC,WA+FrC+D,EAAiB9D,aAAe,CAC9BiC,oBAAqB,0BACrBE,kBAAmB,GAGN2B,QCvGMS,E,4MACnBrC,SAAW,SAAC6B,GACVS,QAAQC,IAAIV,I,uDAIZ,OAAO,kBAAC,EAAD,CAAkB7B,SAAUvC,KAAKuC,e,GANSpC,IAAMC,Y,4ECH3D,IAAI2E,EAAM,CACT,oBAAqB,GACrB,uBAAwB,GACxB,iCAAkC,GAClC,oCAAqC,GACrC,0BAA2B,GAC3B,6BAA8B,GAC9B,0BAA2B,GAC3B,6BAA8B,GAC9B,qCAAsC,GACtC,wCAAyC,GACzC,kCAAmC,GACnC,qCAAsC,GACtC,iCAAkC,GAClC,oCAAqC,GACrC,iCAAkC,GAClC,oCAAqC,GACrC,6CAA8C,GAC9C,gDAAiD,GACjD,2BAA4B,GAC5B,8BAA+B,GAC/B,8BAA+B,GAC/B,iCAAkC,GAClC,8BAA+B,GAC/B,iCAAkC,GAClC,qCAAsC,GACtC,wCAAyC,GACzC,2CAA4C,GAC5C,8CAA+C,IAIhD,SAASC,EAAeC,GACvB,IAAI1F,EAAK2F,EAAsBD,GAC/B,OAAOE,EAAoB5F,GAE5B,SAAS2F,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEL,EAAKE,GAAM,CACpC,IAAII,EAAI,IAAI9B,MAAM,uBAAyB0B,EAAM,KAEjD,MADAI,EAAEpD,KAAO,mBACHoD,EAEP,OAAON,EAAIE,GAEZD,EAAeM,KAAO,WACrB,OAAOb,OAAOa,KAAKP,IAEpBC,EAAeO,QAAUL,EACzBpD,EAAOC,QAAUiD,EACjBA,EAAezF,GAAK,I,4IC1BLiG,EApBI,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACnB,OACE,wBAAIhG,UAAU,cAEVgG,EAAWV,KAAK,SAAAjG,GACd,OACE,wBAAI4G,IAAK5G,GACP,uBAAGmC,KAAI,WAAMnC,IAASA,S,kCCsBrB6G,E,kLArBXC,IAAKC,iBAAiB,aAAcC,KACpCF,IAAKG,eAAe/F,KAAKgG,W,+BAGjB,IAAD,OACP,OACE,yBACEC,IAAK,SAACA,GACJ,EAAKD,QAAUC,IAGjB,8BAAOjG,KAAKX,MAAMD,e,GAbAe,IAAMC,WCqCjB8F,E,kDAzCb,WAAY7G,GAAQ,IAAD,8BACjB,cAAMA,IAIR8G,WAAa,SAAC3F,GACZA,EAAMI,iBACN,EAAKH,UAAS,SAACC,GACb,MAAO,CAAE0F,UAAW1F,EAAU0F,cANhC,EAAKvF,MAAQ,CAAEuF,UAAU,GAFR,E,qDAYT,IACAA,EAAapG,KAAKa,MAAlBuF,SADD,EAE6BpG,KAAKX,MAAMgH,QAAvCpE,EAFD,EAECA,KAAMD,EAFP,EAEOA,YAAalD,EAFpB,EAEoBA,KAErBwH,EAAmBC,MAAQ,YAAcvG,KAAKX,MAAMmH,cAA1B,YAA2C1H,IACxE2H,QACH,OACE,yBAAKhH,UAAU,WACZuC,GAAe,4BAAKA,GAErB,kBAACsE,EAAD,MAEA,2BACE,uBAAGrF,KAAK,GAAGC,QAASlB,KAAKmG,YACtBC,EAAW,OAAS,OADvB,UAKDA,GAAY,kBAAC,EAAD,KAAcnE,Q,GA/Bb9B,IAAMC,WCkCbsG,EAnCD,SAAC,GAAe,IAAbrH,EAAY,EAAZA,MACf,OACE,2BAAOI,UAAU,SACf,+BACE,4BACE,oCACA,2CACA,oCACA,uCACA,0CAGJ,+BACGgF,OAAOa,KAAKjG,GAAO0F,KAAI,SAACW,GACvB,OACE,wBAAIA,IAAKA,GACP,4BAAKA,GACL,4BAAKrG,EAAMqG,GAAK1D,aAChB,4BAAK3C,EAAMqG,GAAK3G,KAAKD,MACrB,4BACGO,EAAMqG,GAAKtD,cAAgB/C,EAAMqG,GAAKtD,aAAalD,OAEtD,4BAAKG,EAAMqG,GAAKlH,UAAY,YCS3BmI,EA7BO,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACf9H,EAAsC8H,EAAtC9H,KAAMkD,EAAgC4E,EAAhC5E,YAAa3C,EAAmBuH,EAAnBvH,MAAO6C,EAAY0E,EAAZ1E,SAEjC,OACE,yBAAKzC,UAAU,iBACb,4BAAKX,GACL,2BAAIkD,GAEJ,sCAAYE,EAASb,OAAS,GAAK,KAEjCa,EAASb,OAAS,EAClBa,EAAS6C,KAAK,SAAAsB,GAAO,OAAI,kBAAC,EAAD,CAASX,IAAKW,EAAQpE,KAAMoE,QAASA,EAASG,cAAe1H,OACtF,qBAGF,qCAEEO,EACA,kBAAC,EAAD,CAAOA,MAAOA,IACd,qC,iBCnBawH,E,kDACnB,WAAYxH,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXiG,MAAOC,OAAOC,SAASC,KAAKC,OAAO,IAHpB,E,gEAOE,IAAD,OAClBH,OAAOI,iBAAiB,cAAc,WACpC,EAAK1G,SAAS,CAACqG,MAAOC,OAAOC,SAASC,KAAKC,OAAO,U,+BAI5C,IACDJ,EAAS9G,KAAKa,MAAdiG,MACDF,EAAYE,EAAQM,IAAcC,QAAQ,SAAAT,GAAS,OAAIA,EAAU9H,OAASgI,KAAO,GAAKM,IAAc,GAE1G,OACE,6BACE,kBAAC,EAAD,CAAY3B,WAAY2B,IAAcrC,KAAI,SAAA6B,GAAS,OAAIA,EAAU9H,UACjE,kBAAC,EAAD,CAAe8H,UAAWA,S,GArBAzG,IAAMC,W,MCOpBkH,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2D,MAiHA,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5I,GACL0F,QAAQ1F,MAAMA,EAAMgD,YC7H5B6F,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.82d9b973.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","module.exports = /* eslint-disable */ [\n  {\n    name: 'EyeIcon',\n    description: 'SVG Eye Icon',\n    code:\n      'import React from \\'react\\';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n',\n    examples: [\n      {\n        name: 'Example',\n        description: '',\n        code:\n          \"import React from 'react';\\nimport EyeIcon from 'bbc-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\",\n      },\n    ],\n  },\n  {\n    name: 'HelloWorld',\n    description:\n      'A super lame component that says Hello with a custom message.',\n    props: {\n      message: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Message to display',\n        defaultValue: { value: \"'World'\", computed: false },\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** A super lame component that says Hello with a custom message. */\\nfunction HelloWorld({message}) {\\n  return <div>Hello {message}</div>\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: 'World'\\n};\\n\\nexport default HelloWorld;\\n\",\n    examples: [\n      {\n        name: 'ExampleHelloWorld',\n        description: 'Custom message',\n        code:\n          \"import React from 'react';\\nimport HelloWorld from 'bbc-react/HelloWorld';\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />;\\n}\\n\",\n      },\n    ],\n  },\n  {\n    name: 'Label',\n    description:\n      'Label with required field display, htmlFor, and block styling',\n    props: {\n      htmlFor: {\n        type: { name: 'string' },\n        required: true,\n        description: 'HTML ID for associated input',\n      },\n      label: {\n        type: { name: 'string' },\n        required: true,\n        description: 'Label text',\n      },\n      required: {\n        type: { name: 'bool' },\n        required: false,\n        description: 'Display asterisk after label if true',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n    examples: [\n      {\n        name: 'ExampleOptional',\n        description: 'Optional label',\n        code:\n          'import React from \\'react\\';\\nimport Label from \\'bbc-react/Label\\';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\"test\" label=\"test\" />;\\n}\\n',\n      },\n      {\n        name: 'ExampleRequired',\n        description: 'Required label',\n        code:\n          'import React from \\'react\\';\\nimport Label from \\'bbc-react/Label\\';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\"test\" label=\"test\" required />;\\n}\\n',\n      },\n    ],\n  },\n  {\n    name: 'PasswordInput',\n    description:\n      'Password input with integrated label, quality tips, and show password toggle.',\n    props: {\n      htmlId: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          'Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.',\n      },\n      name: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\",\n      },\n      value: {\n        type: { name: 'any' },\n        required: false,\n        description: 'Password value',\n      },\n      label: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Input label',\n        defaultValue: { value: \"'Password'\", computed: false },\n      },\n      onChange: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Function called when password input value changes',\n      },\n      maxLength: {\n        type: { name: 'number' },\n        required: false,\n        description: 'Max password length accepted',\n        defaultValue: { value: '50', computed: false },\n      },\n      placeholder: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Placeholder displayed when no password is entered',\n      },\n      showVisibilityToggle: {\n        type: { name: 'bool' },\n        required: false,\n        description:\n          'Set to true to show the toggle for displaying the currently entered password',\n        defaultValue: { value: 'false', computed: false },\n      },\n      quality: {\n        type: { name: 'number' },\n        required: false,\n        description:\n          'Display password quality visually via ProgressBar, accepts a number between 0 and 100',\n      },\n      error: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Validation error to display',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n    examples: [\n      {\n        name: 'ExampleAllFeatures',\n        description: 'All features enabled',\n        code:\n          'import React from \\'react\\';\\nimport PasswordInput from \\'bbc-react/PasswordInput\\';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: \\'\\',\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\"password-input-example-all-features\"\\n          name=\"password\"\\n          onChange={(event) => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\"Enter password\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n',\n      },\n    ],\n  },\n  {\n    name: 'ProgressBar',\n    description: '',\n    props: {\n      percent: {\n        type: { name: 'number' },\n        required: true,\n        description: 'Percent of progress completed',\n      },\n      width: {\n        type: { name: 'number' },\n        required: true,\n        description: 'Bar width',\n      },\n      height: {\n        type: { name: 'number' },\n        required: false,\n        description: 'Bar height',\n        defaultValue: { value: '5', computed: false },\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\",\n    examples: [\n      {\n        name: 'Example100Percent',\n        description: '100% progress and height 20px',\n        code:\n          \"import React from 'react';\\nimport ProgressBar from 'bbc-react/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\",\n      },\n      {\n        name: 'Example10Percent',\n        description: '10% progress',\n        code:\n          \"import React from 'react';\\nimport ProgressBar from 'bbc-react/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\",\n      },\n      {\n        name: 'Example70Percent',\n        description: '70% progress',\n        code:\n          \"import React from 'react';\\nimport ProgressBar from 'bbc-react/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\",\n      },\n    ],\n  },\n  {\n    name: 'RegistrationForm',\n    description: 'Registration form with built-in validation.',\n    props: {\n      confirmationMessage: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Message displayed upon successful submission',\n        defaultValue: { value: '\"Thanks for registering!\"', computed: false },\n      },\n      onSubmit: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Called when form is submitted',\n      },\n      minPasswordLength: {\n        type: { name: 'number' },\n        required: false,\n        description: 'Minimum password length',\n        defaultValue: { value: '8', computed: false },\n      },\n    },\n    code:\n      'import React from \\'react\\';\\nimport PropTypes from \\'prop-types\\';\\nimport TextInput from \\'../TextInput\\';\\nimport PasswordInput from \\'../PasswordInput\\';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: \\'\\',\\n        password: \\'\\'\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = \\'Email required.\\';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\"registration-form-email\"\\n          name=\"email\"\\n          onChange={this.onChange}\\n          label=\"Email\"\\n          value={email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\"registration-form-password\"\\n          name=\"password\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \"Thanks for registering!\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n',\n    examples: [\n      {\n        name: 'ExampleRegistrationForm',\n        description: '',\n        code:\n          \"import React from 'react';\\nimport RegistrationForm from 'bbc-react/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  };\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\n  }\\n}\\n\",\n      },\n    ],\n  },\n  {\n    name: 'TextInput',\n    description:\n      'Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.',\n    props: {\n      htmlId: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          'Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.',\n      },\n      name: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          \"Input name. Recommend setting this to match object's property so a single change handler can be used.\",\n      },\n      label: {\n        type: { name: 'string' },\n        required: true,\n        description: 'Input label',\n      },\n      type: {\n        type: {\n          name: 'enum',\n          value: [\n            { value: \"'text'\", computed: false },\n            { value: \"'number'\", computed: false },\n            { value: \"'password'\", computed: false },\n          ],\n        },\n        required: false,\n        description: 'Input type',\n        defaultValue: { value: '\"text\"', computed: false },\n      },\n      required: {\n        type: { name: 'bool' },\n        required: false,\n        description: 'Mark label with asterisk if set to true',\n        defaultValue: { value: 'false', computed: false },\n      },\n      onChange: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Function to call onChange',\n      },\n      placeholder: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Placeholder to display when empty',\n      },\n      value: { type: { name: 'any' }, required: false, description: 'Value' },\n      error: {\n        type: { name: 'string' },\n        required: false,\n        description: 'String to display when error occurs',\n      },\n      children: {\n        type: { name: 'node' },\n        required: false,\n        description: 'Child component to display next to the input',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n    examples: [\n      {\n        name: 'ExampleError',\n        description: 'Required TextBox with error',\n        code:\n          'import React from \\'react\\';\\nimport TextInput from \\'bbc-react/TextInput\\';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\"example-optional\"\\n        label=\"First Name\"\\n        name=\"firstname\"\\n        onChange={() => {}}\\n        required\\n        error=\"First name is required.\"\\n      />\\n    );\\n  }\\n}\\n',\n      },\n      {\n        name: 'ExampleOptional',\n        description: 'Optional TextBox',\n        code:\n          'import React from \\'react\\';\\nimport TextInput from \\'bbc-react/TextInput\\';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\"example-optional\"\\n        label=\"First Name\"\\n        name=\"firstname\"\\n        onChange={() => {}}\\n      />\\n    );\\n  }\\n}\\n',\n      },\n    ],\n  },\n  {\n    name: 'TextInputBEM',\n    description:\n      'Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.',\n    props: {\n      htmlId: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          'Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.',\n      },\n      name: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          \"Input name. Recommend setting this to match object's property so a single change handler can be used.\",\n      },\n      label: {\n        type: { name: 'string' },\n        required: true,\n        description: 'Input label',\n      },\n      type: {\n        type: {\n          name: 'enum',\n          value: [\n            { value: \"'text'\", computed: false },\n            { value: \"'number'\", computed: false },\n            { value: \"'password'\", computed: false },\n          ],\n        },\n        required: false,\n        description: 'Input type',\n        defaultValue: { value: \"'text'\", computed: false },\n      },\n      required: {\n        type: { name: 'bool' },\n        required: false,\n        description: 'Mark label with asterisk if set to true',\n        defaultValue: { value: 'false', computed: false },\n      },\n      onChange: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Function to call onChange',\n      },\n      placeholder: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Placeholder to display when empty',\n      },\n      value: { type: { name: 'any' }, required: false, description: 'Value' },\n      error: {\n        type: { name: 'string' },\n        required: false,\n        description: 'String to display when error occurs',\n      },\n      children: {\n        type: { name: 'node' },\n        required: false,\n        description: 'Child component to display next to the input',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = 'text',\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && 'textinput__input--state-error'}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node,\\n};\\n\\nexport default TextInput;\\n\",\n    examples: [\n      {\n        name: 'ExampleError',\n        description: 'Required TextBox with error',\n        code:\n          'import React from \\'react\\';\\nimport TextInputBEM from \\'bbc-react/TextInputBEM\\';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\"example-optional\"\\n        label=\"First Name\"\\n        name=\"firstname\"\\n        onChange={() => {}}\\n        required\\n        error=\"First name is required.\"\\n      />\\n    );\\n  }\\n}\\n',\n      },\n    ],\n  },\n  {\n    name: 'TextInputCSSModules',\n    description:\n      'Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.',\n    props: {\n      htmlId: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          'Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.',\n      },\n      name: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          \"Input name. Recommend setting this to match object's property so a single change handler can be used.\",\n      },\n      label: {\n        type: { name: 'string' },\n        required: true,\n        description: 'Input label',\n      },\n      type: {\n        type: {\n          name: 'enum',\n          value: [\n            { value: \"'text'\", computed: false },\n            { value: \"'number'\", computed: false },\n            { value: \"'password'\", computed: false },\n          ],\n        },\n        required: false,\n        description: 'Input type',\n        defaultValue: { value: '\"text\"', computed: false },\n      },\n      required: {\n        type: { name: 'bool' },\n        required: false,\n        description: 'Mark label with asterisk if set to true',\n        defaultValue: { value: 'false', computed: false },\n      },\n      onChange: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Function to call onChange',\n      },\n      placeholder: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Placeholder to display when empty',\n      },\n      value: { type: { name: 'any' }, required: false, description: 'Value' },\n      error: {\n        type: { name: 'string' },\n        required: false,\n        description: 'String to display when error occurs',\n      },\n      children: {\n        type: { name: 'node' },\n        required: false,\n        description: 'Child component to display next to the input',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n    examples: [\n      {\n        name: 'ExampleError',\n        description: 'Required TextBox with error',\n        code:\n          'import React from \\'react\\';\\nimport TextInputCSSModules from \\'bbc-react/TextInputCSSModules\\';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\"example-optional\"\\n        label=\"First Name\"\\n        name=\"firstname\"\\n        onChange={() => {}}\\n        required\\n        error=\"First name is required.\"\\n      />\\n    );\\n  }\\n}\\n',\n      },\n    ],\n  },\n  {\n    name: 'TextInputStyledComponents',\n    description:\n      'Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.',\n    props: {\n      htmlId: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          'Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.',\n      },\n      name: {\n        type: { name: 'string' },\n        required: true,\n        description:\n          \"Input name. Recommend setting this to match object's property so a single change handler can be used.\",\n      },\n      label: {\n        type: { name: 'string' },\n        required: true,\n        description: 'Input label',\n      },\n      type: {\n        type: {\n          name: 'enum',\n          value: [\n            { value: \"'text'\", computed: false },\n            { value: \"'number'\", computed: false },\n            { value: \"'password'\", computed: false },\n          ],\n        },\n        required: false,\n        description: 'Input type',\n        defaultValue: { value: '\"text\"', computed: false },\n      },\n      required: {\n        type: { name: 'bool' },\n        required: false,\n        description: 'Mark label with asterisk if set to true',\n        defaultValue: { value: 'false', computed: false },\n      },\n      onChange: {\n        type: { name: 'func' },\n        required: true,\n        description: 'Function to call onChange',\n      },\n      placeholder: {\n        type: { name: 'string' },\n        required: false,\n        description: 'Placeholder to display when empty',\n      },\n      value: { type: { name: 'any' }, required: false, description: 'Value' },\n      error: {\n        type: { name: 'string' },\n        required: false,\n        description: 'String to display when error occurs',\n      },\n      children: {\n        type: { name: 'node' },\n        required: false,\n        description: 'Child component to display next to the input',\n      },\n    },\n    code:\n      \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: red;\\n  `\\n\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}/>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n    examples: [\n      {\n        name: 'ExampleError',\n        description: 'Required TextBox with error',\n        code:\n          'import React from \\'react\\';\\nimport TextInputStyledComponents from \\'bbc-react/TextInputStyledComponents\\';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\"example-optional\"\\n        label=\"First Name\"\\n        name=\"firstname\"\\n        onChange={() => {}}\\n        required\\n        error=\"First name is required.\"\\n      />\\n    );\\n  }\\n}\\n',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport EyeIcon from 'bbc-react/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from 'react';\nimport Label from 'bbc-react/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}\n","import React from 'react';\nimport Label from 'bbc-react/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />;\n}\n","import React from 'react';\nimport PasswordInput from 'bbc-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={(event) => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport ProgressBar from 'bbc-react/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","import React from 'react';\nimport ProgressBar from 'bbc-react/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />;\n}\n","import React from 'react';\nimport ProgressBar from 'bbc-react/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n","import React from 'react';\nimport TextInput from 'bbc-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from 'react';\nimport TextInput from 'bbc-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A super lame component that says Hello with a custom message. */\nfunction HelloWorld({message}) {\n  return <div>Hello {message}</div>\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;\n","import React from 'react';\nimport HelloWorld from 'bbc-react/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Pluralsight viewers!\" />;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputStyledComponents from 'bbc-react/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputCSSModules from 'bbc-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = 'text',\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}\n      />\n      {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node,\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputBEM from 'bbc-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'bbc-react/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  };\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />;\n  }\n}\n","var map = {\n\t\"./EyeIcon/Example\": 22,\n\t\"./EyeIcon/Example.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 31,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 31,\n\t\"./Label/ExampleOptional\": 23,\n\t\"./Label/ExampleOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100Percent\": 26,\n\t\"./ProgressBar/Example100Percent.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example70Percent\": 28,\n\t\"./ProgressBar/Example70Percent.js\": 28,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 35,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 35,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 30,\n\t\"./TextInput/ExampleOptional.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 34,\n\t\"./TextInputBEM/ExampleError.js\": 34,\n\t\"./TextInputCSSModules/ExampleError\": 33,\n\t\"./TextInputCSSModules/ExampleError.js\": 33,\n\t\"./TextInputStyledComponents/ExampleError\": 32,\n\t\"./TextInputStyledComponents/ExampleError.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 64;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/core';\n\nimport javascript from 'highlight.js/lib/languages/javascript';\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={(ref) => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = (event) => {\n    event.preventDefault();\n    this.setState((prevState) => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\n      .default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"\" onClick={this.toggleCode}>\n            {showCode ? 'Hide' : 'Show'} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired,\n};\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map((key) => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && 'X'}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired,\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map( example => <Example key={example.code} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({route: window.location.hash.substr(1)})\n    })\n  }\n\n  render() {\n    const {route} = this.state;\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/highlight.js/styles/ocean.css';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nReactDOM.render(<Docs />, document.getElementById('root'));\n"],"sourceRoot":""}